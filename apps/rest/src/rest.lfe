(defmodule rest 
  (behaviour application)
  (export all))

(defun start (type, args)

  ;(mail:start_link)
  ;(db:start_link)
  (www:start 'rest)
  (rest_sup:start_link))

(defun stop (state) 'ok )

(defun do
  
  ((#"app.drop")
    (tuple 'root '() 
      (lambda (_ _ _) (app:drop))))
  
  ((#"app.init")
    (tuple 'root '() 
      (lambda (_ _ _) (app:create))))
  
  ((#"app.get")
    (tuple 'root '() 
      (lambda (_ _ _) (app:get))))

  ((#"index.organization")
    (tuple 'root '(#(text #"id")) 
      (match-lambda 
        ((_ _ (list oid))
          (organizations:with_organization oid (lambda (o)
            (organizations:index o (lambda () ))))))))

  ((#"index.schedules")
    (tuple 'root '() 
      (lambda (_ _ _)
        (schedules:index_schedules (lambda () )))))
  
  ((#"signup")
    (tuple 'anonymous '(#(text #"first") #(text #"last") #(email #"email") #(lang #"lang")) 
      (match-lambda 
        ((app _ (list first last email lang)) 
          (users:create first last email lang (lambda (u)
            (users:create_ptoken u (lambda (t)
              (users:create_acls u (lambda ()
                (case (users:notify_signup u app lang t)
                  (#(notification true) (map 'token 'true 'acls 'true 'notification 'true))
                  (#(notification false) (map 'token t 'acls 'true 'notification 'false)))))))))))))
  
  
  ((#"passwd.reset")
    (tuple 'anonymous '(#(password #"password" #"password_confirm") #(text #"token") #(email #"email") #(lang #"lang"))
      (match-lambda
        ((app _ (list password token email lang))
          (users:find_by_email email (lambda (u)
			(users:on_valid_ptoken u token (lambda ()
		      (users:set_passwd u password (lambda ()
                (case (users:notify_passwd_changed u app lang)
                  (#(notification true) #M(notification true))
                  (#(notification false) #M(notification false)))))))))))))
  
  
  ((#"signin")
    (tuple 'anonymous '(#(email #"email") #(text #"password") #(text #"ua") #(text #"ip"))
      (match-lambda
        ((app _ (list email password ua ip))
          (users:find_by_email email (lambda (u)
			(users:on_valid_passwd u password (lambda ()
		      (users:create_session u app ua ip (lambda (t)
                (map 'session t)))))))))))
  
  
  ((#"signout")
    (tuple 'signed_in '(#(text #"session"))
      (match-lambda
        ((_ _ (list t))
          (users:delete_session t (lambda ()
            #M(map session_deleted)))))))
  
    
  ((#"passwd.forgot")
    (tuple 'anonymous '(#(email #"email") #(lang #"lang"))
      (match-lambda
        ((app _ (list email lang))
          (users:find_by_email email (lambda (u)
            (users:create_ptoken u (lambda (t)
              (case (users:notify_passwd_forgot u app lang t)
                  (#(notification true) (map 'token 'true 'notification 'true))
                  (#(notification false) (map 'token t 'notification 'false)))))))))))  
          

  ((#"profile.set")
    (tuple 'signed_in '(#(text #"first") #(text #"last"))
      (match-lambda
        ((_ u (list first last))
          (users:set_name u first last)))))
  
  ((#"my.profile.get")
    (tuple 'signed_in '()
      (lambda (_ u _)
        (users:make_public u))))
    
  ((#"profile.get")
    (tuple 'signed_in '(#(text #"id"))
      (match-lambda
        ((_ u (list id))
          (users:find_by_id id (lambda (p)
            (users:on_read_access u p (lambda ()
              (users:make_public p)))))))))
  
  ((#"asset.create")
    (tuple 'signed_in '(#(file #"file"))
      (match-lambda
        ((_ u (list f))
          (assets:create u f (lambda (m) m ))))))
  
  ((#"asset.get")
    (tuple 'signed_in '(#(text #"id"))
      (match-lambda
        ((_ u (list id))
          (assets:get u id (lambda (m) 
            (tuple 'file m )))))))
  
  ((#"avatar.get")
    (tuple 'signed_in '(#(text #"id"))
      (match-lambda
        ((_ u (list id))
          (users:find_by_id id (lambda (p)
            (users:on_read_access u p (lambda ()
              (assets:with_asset (maps:get #"photo" p) (kit:cfg 'assets 'avatar) (lambda (m)
                (tuple 'file (maps:put 'fallback (kit:cfg 'assets 'avatar) m))))))))))))
  
  ((#"my.avatar.get")
    (tuple 'signed_in '()
      (lambda (_ u _)
        (assets:get u (maps:get #"photo" u) (lambda (m)
          (tuple 'file m ))))))
  
    
  ((#"my.avatar.set")
    (tuple 'signed_in '(#(file #"file"))
      (match-lambda
        ((_ u (list file))
          (assets:create u file (lambda (m)
            (users:set_avatar u (maps:get #"id" m))))))))
  
  ((#"acls.get")
    (tuple 'signed_in '()
      (lambda (_ u _)
        (users:get_acls u))))
  
  ((#"stats.get")
    (tuple 'signed_in '(#(text #"id"))
      (match-lambda
        ((_ u (list id))
          (stats:get u id)))))
  
  ((#"get.my.stats")
    (tuple 'signed_in '()
      (match-lambda
        ((_ u _)
          (stats:get u)))))

  ((#"create.organization")
    (tuple 'organizations '(#(text #"name"))
      (match-lambda
        ((_ u (list name))
          (organizations:create u name (lambda (o) o))))))
  
  ((#"get.organizations")
    (tuple 'organizations '()
      (lambda (_ u _)
        (organizations:with_organizations u (lambda (o) o)))))
  
  ((#"get.user.organizations")
    (tuple 'organizations '(#(text #"id"))
      (match-lambda 
        ((_ u (list id))
          (users:with_user u id (lambda (p)
            (common:if_read p (lambda ()
              (organizations:with_organizations u p (lambda (orgs)
                (common:filter_with_access orgs (lambda (orgs2) orgs2))))))))))))

  ((#"get.organization")
    (tuple 'organizations '(#(text #"id"))
      (match-lambda
        ((_ u (list id )) 
          (organizations:with_organization u id (lambda(o) o))))))

  ((#"add.organization.member")
    (tuple 'organizations '(#(text #"id") #(email #"email"))
      (match-lambda
        ((_ u (list id email)) 
          (organizations:with_organization u id (lambda(o)
            (common:if_owner o (lambda ()
              (users:find_by_email email (lambda (m)
                (organizations:add_member o m (lambda (_) 
                  (users:make_public m)))))))))))))
         
  ((#"get.organization.members")
    (tuple 'organizations '(#(text #"id"))
      (match-lambda
        ((_ u (list id)) 
          (organizations:with_organization u id (lambda (o)
            (common:if_read o (lambda ()
              (organizations:with_members o (lambda (m) m))))))))))
  
  ((#"remove.organization.member")
    (tuple 'organizations '(#(text #"id") #(text #"member"))
      (match-lambda
        ((_ u (list id member))
          (organizations:with_organization u id (lambda (o)
            (common:if_owner o (lambda ()
              (users:find_by_id member (lambda (m)
                (common:with_org_access m o (lambda (o2)
                  (common:if_not_owner o2 (lambda ()
                    (organizations:remove_member o2 m (lambda () #M()))))))))))))))))
  
  ((#"set.organization.owner")
    (tuple 'organizations '(#(text #"id") #(text #"owner"))
      (match-lambda ((_ u (list id owner))
          (organizations:with_organization u id (lambda (o)
            (common:if_owner o (lambda ()
              (users:find_by_id owner (lambda (m)
                (common:with_org_access m o (lambda (o2)
                  (common:if_read o2 (lambda ()
                    (organizations:set_owner u o u m (lambda(o3) o3))))))))))))))))
  
  ((#"rename.organization")
    (tuple 'organizations '(#(text #"id") #(text #"name"))
      (match-lambda
        ((_ u (list id name))
          (organizations:with_organization u id (lambda (o)
            (common:if_owner o (lambda ()
              (organizations:rename u o name (lambda (o2) o2 ))))))))))

  
  ((#"add.organization.tag")
    (tuple 'organizations '(#(text #"id") #(text #"tag"))
      (match-lambda
        ((_ u (list id tag))
          (organizations:with_organization u id (lambda (o)
            (common:if_owner o (lambda ()
              (organizations:add_tag o tag (lambda (tags) tags ))))))))))

  ((#"remove.organization.tag")
    (tuple 'organizations '(#(text #"id") #(text #"tag"))
      (match-lambda
        ((_ u (list id tag))
          (organizations:with_organization u id (lambda (o)
            (common:if_owner o (lambda ()
              (organizations:remove_tag o tag (lambda (tags) tags ))))))))))
  
  ((#"get.organization.tags")
    (tuple 'organizations '(#(text #"id"))
      (match-lambda
        ((_ u (list id))
          (organizations:with_organization u id (lambda (o)
            (common:if_read o (lambda ()
              (organizations:with_tags o (lambda (tags) tags ))))))))))
   
  
  ((#"add.organization.member.tag")
    (tuple 'organizations '(#(text #"id") #(text #"member") #(text #"tag"))
      (match-lambda
        ((_ u (list id uid tag))
          (organizations:with_organization u id (lambda (o)
            (common:if_owner o (lambda ()
              (users:with_user uid (lambda (member)
                (organizations:with_member o member (lambda (m)
                  (organizations:with_tag o tag (lambda (_)
                    (organizations:add_member_tag o m tag (lambda (tags) tags ))))))))))))))))
  

  ((#"remove.organization.member.tag")
    (tuple 'organizations '(#(text #"id") #(text #"member") #(text #"tag"))
      (match-lambda
        ((_ u (list id uid tag))
          (organizations:with_organization u id (lambda (o)
            (common:if_owner o (lambda ()
              (users:with_user uid (lambda (member)
                (organizations:with_member o member (lambda (m)
                  (organizations:remove_member_tag o m tag (lambda (tags) tags ))))))))))))))
 

  ((#"get.organization.member.tags")
    (tuple 'organizations '(#(text #"id") #(text #"member"))
      (match-lambda
        ((_ u (list id uid))
          (organizations:with_organization u id (lambda (o)
            (common:if_read o (lambda ()
              (users:with_user uid (lambda (member)
                (organizations:with_member o member (lambda (m)
                  (organizations:get_member_tags o m (lambda (tags) tags ))))))))))))))

  ((#"set.organization.member.profile")
    (tuple 'organizations '(#(text #"id") #(text #"member") #(text #"profile"))
      (match-lambda
        ((_ u (list oid mid pid))
          (organizations:with_organization u oid (lambda (o)
            (common:if_owner o (lambda ()
              (users:with_user mid (lambda (member)
                (organizations:with_member o member (lambda (m)
                  (schedules:with_profile u pid (lambda (p)
                    (common:if_read p (lambda ()
                      (organizations:set_member_profile o m p (lambda (m2) m2))))))))))))))))))
  
  ((#"create.schedule.template")
    (tuple 'schedules '(#(text #"organization") #(text #"name"))
      (match-lambda
        ((_ u (list s_id name))
          (organizations:with_organization u s_id (lambda (s)
            (common:if_read s (lambda ()
              (schedules:create_template u s name (lambda (t) 
                (common:with_access u t (lambda (t2) t2))))))))))))

  ((#"create.availability.template")
    (tuple 'schedules '(#(text #"organization") #(text #"name"))
      (match-lambda
        ((_ u (list s_id name))
          (organizations:with_organization u s_id (lambda (s)
            (common:if_read s (lambda ()
              (schedules:create_availability_template u s name (lambda (t) 
                (common:with_access u t (lambda (t2) t2))))))))))))
  
  ((#"get.schedule.templates")
    (tuple 'schedules '(#(text #"organization"))
      (match-lambda
        ((_ u (list organization))
          (organizations:with_organization u organization (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_templates u s (lambda(t) t))))))))))
  
  ((#"get.all.schedule.templates")
    (tuple 'schedules '()
      (match-lambda
        ((_ u _)
          (organizations:with_organizations u (lambda (orgs)
            (lists:flatten (lists:map (lambda (o)
              (schedules:with_templates u o (lambda(t) t))) orgs))))))))
  
  ((#"get.availability.templates")
    (tuple 'schedules '(#(text #"organization"))
      (match-lambda
        ((_ u (list organization))
          (organizations:with_organization u organization (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_availability_templates u s (lambda(t) t))))))))))
  
  ((#"get.all.availability.templates")
    (tuple 'schedules '()
      (match-lambda
        ((_ u _)
          (organizations:with_organizations u (lambda (orgs)
            (lists:flatten (lists:map (lambda (o)
              (schedules:with_availability_templates u o (lambda(t) t))) orgs))))))))

  ((#"get.all.owned.schedule.templates")
    (tuple 'schedules '()
      (match-lambda
        ((_ u _)
          (organizations:with_organizations u (lambda (orgs)
            (let* ((templates (lists:flatten (lists:map (lambda (o) (schedules:with_templates u o (lambda(t) t))) orgs))))
              (lists:map (lambda (t)
                  (maps:put #"organization" (organizations:with_organization (maps:get #"organization" t) (lambda (o) o)) t )) 
                (lists:filter (lambda (t) (common:is_owner t)) templates)))))))))

  ((#"get.schedule.template")
    (tuple 'schedules '(#(text #"organization") #(text #"template"))
      (match-lambda
        ((_ u (list sid tid))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_template u tid (lambda(t)
                (schedules:with_template_tags t (lambda (tags) 
                  (maps:put #"tags" tags t)))))))))))))

  ((#"rename.schedule.template")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"name"))
      (match-lambda
        ((_ u (list sid tid name))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (schedules:rename_template u s t name (lambda (t2) t2))))))))))))))
  
  ((#"rename.availability.template")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"name"))
      (match-lambda
        ((_ u (list sid tid name))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_availability_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (schedules:rename_availability_template u s t name (lambda (t2) t2))))))))))))))

  ((#"duplicate.schedule.template")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"name"))
      (match-lambda
        ((_ u (list sid tid name))
          (organizations:with_organization u sid (lambda (o)
            (common:if_read o (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_read t (lambda ()
                  (schedules:duplicate_schedule_template u o t name (lambda (t2) t2))))))))))))))

  ((#"duplicate.availability.template")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"name"))
      (match-lambda
        ((_ u (list sid tid name))
          (organizations:with_organization u sid (lambda (o)
            (common:if_read o (lambda ()
              (schedules:with_availability_template u tid (lambda (t)
                (common:if_read t (lambda ()
                  (schedules:duplicate_availability_template u o t name (lambda (t2) t2))))))))))))))


    



  ((#"add.schedule.template.tag")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"tag"))
      (match-lambda
        ((_ u (list oid tid tag))
          (organizations:with_organization u oid (lambda (o)
            (common:if_read o (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (organizations:with_tag o tag (lambda (_)
                    (schedules:add_template_tag t tag (lambda (tags) tags ))))))))))))))))

  ((#"remove.schedule.template.tag")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"tag"))
      (match-lambda
        ((_ u (list sid tid tag))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (schedules:remove_template_tag t tag (lambda (tags) tags ))))))))))))))

  ((#"get.schedule.template.tags")
    (tuple 'schedules '(#(text #"organization") #(text #"template"))
      (match-lambda
        ((_ u (list sid tid))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_read t (lambda ()
                  (schedules:with_template_tags t (lambda (tags) tags ))))))))))))))

  ((#"set.schedule.template.owner")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"owner"))
      (match-lambda ((_ u (list sid tid uid))
          (organizations:with_organization u sid (lambda (o)
            (schedules:with_template u tid (lambda (t)
              (common:if_owner t (lambda ()
                (users:find_by_id uid (lambda (m)
                  (common:with_org_access m o (lambda (o2)
                    (common:if_read o2 (lambda ()
                      (schedules:set_template_owner u t m (lambda(t2) t2 ))))))))))))))))))

  ((#"set.availability.template.owner")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"owner"))
      (match-lambda ((_ u (list sid tid uid))
          (organizations:with_organization u sid (lambda (o)
            (schedules:with_availability_template u tid (lambda (t)
              (common:if_owner t (lambda ()
                (users:find_by_id uid (lambda (m)
                  (common:with_org_access m o (lambda (o2)
                    (common:if_read o2 (lambda ()
                      (schedules:set_availability_template_owner u t m (lambda(t2) t2 ))))))))))))))))))
  
  ((#"add.schedule.template.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"name") 
      #(text #"type") #(int #"staffing" ) #(int #"start_day") #(int #"start_hour") #(int #"start_min" ) #(int #"end_day") #(int #"end_hour") #(int #"end_min" )) 
      (match-lambda ((_ u (list sid tid name type staffing sd sh sm ed eh em ))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (schedules:add_template_shift u t name type staffing sd sh sm ed eh em (lambda (sh) sh))))))))))))))


  ((#"update.schedule.template.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"shift") #(text #"name")
      #(text #"type") #(int #"staffing" ) #(int #"start_day") #(int #"start_hour") #(int #"start_min" ) #(int #"end_day") #(int #"end_hour") #(int #"end_min" )) 
      (match-lambda ((_ u (list sid tid shid name type staffing sd sh sm ed eh em ))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (schedules:with_template_shift u shid (lambda (shift)
                    (schedules:update_template_shift shift name type staffing sd sh sm ed eh em (lambda (shift2) shift2))))))))))))))))

  ((#"copy.schedule.template.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"shift") #(text #"name")
      #(text #"type") #(int #"staffing" ) #(int #"start_day") #(int #"start_hour") #(int #"start_min" ) #(int #"end_day") #(int #"end_hour") #(int #"end_min" )) 
      (match-lambda ((_ u (list sid tid shid name type staffing sd sh sm ed eh em ))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (schedules:with_template_shift u shid (lambda (shift)
                    (schedules:copy_template_shift u t shift name type staffing sd sh sm ed eh em (lambda (shift2) shift2))))))))))))))))
  
  ((#"add.availability.template.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"template")  
      #(int #"start_day") #(int #"start_hour") #(int #"start_min" ) #(int #"end_day") #(int #"end_hour") #(int #"end_min" )) 
      (match-lambda ((_ u (list sid tid sd sh sm ed eh em ))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_availability_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (schedules:add_availability_template_shift u t sd sh sm ed eh em (lambda (sh) sh))))))))))))))


  ((#"update.availability.template.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"shift") 
      #(int #"start_day") #(int #"start_hour") #(int #"start_min" ) #(int #"end_day") #(int #"end_hour") #(int #"end_min" )) 
      (match-lambda ((_ u (list sid tid shid sd sh sm ed eh em ))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_availability_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (schedules:with_template_shift u shid (lambda (shift)
                    (schedules:update_availability_template_shift shift sd sh sm ed eh em (lambda (shift2) shift2))))))))))))))))

  ((#"copy.availability.template.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"shift") 
      #(int #"start_day") #(int #"start_hour") #(int #"start_min" ) #(int #"end_day") #(int #"end_hour") #(int #"end_min" )) 
      (match-lambda ((_ u (list sid tid shid sd sh sm ed eh em ))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_availability_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (schedules:with_template_shift u shid (lambda (shift)
                    (schedules:copy_availability_template_shift u t shift sd sh sm ed eh em (lambda (shift2) shift2))))))))))))))))

  ((#"add.schedule.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule") #(text #"name") 
      #(text #"type") #(int #"day") #(int #"month") #(int #"year") #(int #"start_day") #(int #"start_hour") #(int #"start_min" ) #(int #"end_day") #(int #"end_hour") #(int #"end_min" )) 
      (match-lambda ((_ u (list oid sid name type d m y sd sh sm ed eh em ))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s)
              (common:if_owner s (lambda ()
                (schedules:create_standalone_schedule_shift u s name type y m d sd sh sm ed eh em (lambda (sh) sh))))))))))))))
  
  ((#"update.schedule.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule") #(text #"shift") #(text #"name")
      #(text #"type") #(int #"day") #(int #"month") #(int #"year") #(int #"start_day") #(int #"start_hour") #(int #"start_min" ) #(int #"end_day") #(int #"end_hour") #(int #"end_min" )) 
      (match-lambda ((_ u (list oid sid shid name type d m y sd sh sm ed eh em ))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s)
              (common:if_owner s (lambda ()
                (schedules:with_schedule_shift u shid (lambda (shift)
                  (schedules:update_schedule_shift u s shift name type y m d sd sh sm ed eh em (lambda (sh) sh))))))))))))))))

  ((#"copy.schedule.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule") #(text #"shift") #(text #"name")
      #(text #"type") #(int #"day") #(int #"month") #(int #"year") #(int #"start_day") #(int #"start_hour") #(int #"start_min" ) #(int #"end_day") #(int #"end_hour") #(int #"end_min" )) 
      (match-lambda ((_ u (list oid sid shid name type d m y sd sh sm ed eh em ))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s)
              (common:if_owner s (lambda ()
                (schedules:with_schedule_shift u shid (lambda (shift)
                  (schedules:copy_schedule_shift u s shift name type y m d sd sh sm ed eh em (lambda (sh) sh))))))))))))))))
  
  ((#"assign.schedule.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule") #(text #"shift") #(text #"assignedto"))
      (match-lambda ((_ u (list oid sid shid uid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s)
              (common:if_owner s (lambda ()
                (users:find_by_id uid (lambda (m)
                  (common:with_org_access m o (lambda (o2)
                    (common:if_read o2 (lambda ()
                      (schedules:with_schedule_shift u shid (lambda (sh)
                        (schedules:assign_schedule_shift u s sh uid (lambda (sh2) sh2))))))))))))))))))))))

  ((#"remove.schedule.template.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"shift"))
      (match-lambda ((_ u (list sid tid shid))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (schedules:with_template_shift u shid (lambda (sh)
                    (schedules:remove_template_shift t sh (lambda () #M(removed true)))))))))))))))))
  
  ((#"remove.availability.template.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"shift"))
      (match-lambda ((_ u (list sid tid shid))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_availability_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (schedules:with_template_shift u shid (lambda (sh)
                    (schedules:remove_template_shift t sh (lambda () #M(removed true)))))))))))))))))
    
  ((#"remove.schedule.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule") #(text #"shift"))
      (match-lambda ((_ u (list oid sid shid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s)
              (common:if_owner s (lambda ()
                (schedules:with_schedule_shift u shid (lambda (sh)
                  (schedules:remove_schedule_shift u s sh (lambda () #M(removed true)))))))))))))))))
    

  ((#"get.schedule.template.shifts")
    (tuple 'schedules '(#(text #"organization") #(text #"template"))
      (match-lambda ((_ u (list sid tid))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_read t (lambda ()
                  (schedules:with_template_shifts u t (lambda (shifts) shifts))))))))))))))

  ((#"get.availability.template.shifts")
    (tuple 'schedules '(#(text #"organization") #(text #"template"))
      (match-lambda ((_ u (list sid tid))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_availability_template u tid (lambda (t)
                (common:if_read t (lambda ()
                  (schedules:with_template_shifts u t (lambda (shifts) shifts))))))))))))))
  
  ((#"get.schedule.template.shift")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"shift"))
      (match-lambda ((_ u (list oid tid sid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_template u tid (lambda (t)
              (common:if_read t (lambda ()
                (schedules:with_template_shift u sid (lambda (s) s))))))))))))))

  ((#"add.schedule.template.shift.tag")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"shift") #(text #"tag"))
      (match-lambda ((_ u (list oid tid shid tag))
          (organizations:with_organization u oid (lambda (o)
            (common:if_read o (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (organizations:with_tag o tag (lambda (_)
                    (schedules:with_template_shift u shid (lambda (sh)
                      (schedules:add_shift_tag sh tag (lambda (sh2) sh2))))))))))))))))))

  ((#"add.schedule.shift.tag")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule") #(text #"shift") #(text #"tag"))
      (match-lambda ((_ u (list oid sid shid tag))
          (organizations:with_organization u oid (lambda (o)
            (common:if_read o (lambda ()
              (schedules:with_schedule u sid (lambda (s)
                (common:if_owner s (lambda ()
                  (organizations:with_tag o tag (lambda (_)
                    (schedules:with_schedule_shift u shid (lambda (sh)
                      (schedules:add_shift_tag sh tag (lambda (sh2) sh2))))))))))))))))))
  
  ((#"remove.schedule.template.shift.tag")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"shift") #(text #"tag"))
      (match-lambda ((_ u (list sid tid shid tag))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_owner t (lambda ()
                  (schedules:with_template_shift u shid (lambda (sh)
                    (schedules:remove_shift_tag sh tag (lambda (sh2) sh2))))))))))))))))

  ((#"remove.schedule.shift.tag")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule") #(text #"shift") #(text #"tag"))
      (match-lambda ((_ u (list oid sid shid tag))
          (organizations:with_organization u oid (lambda (o)
            (common:if_read o (lambda ()
              (schedules:with_schedule u sid (lambda (s)
                (common:if_owner s (lambda ()
                  (organizations:with_tag o tag (lambda (_)
                    (schedules:with_schedule_shift u shid (lambda (sh)
                      (schedules:remove_shift_tag sh tag (lambda (sh2) sh2))))))))))))))))))


  ((#"get.schedule.template.shift.tags")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(text #"shift"))
      (match-lambda ((_ u (list sid tid shid))
          (organizations:with_organization u sid (lambda (s)
            (common:if_read s (lambda ()
              (schedules:with_template u tid (lambda (t)
                (common:if_read t (lambda ()
                  (schedules:with_template_shift u shid (lambda (sh)
                    (schedules:with_shift_tags sh (lambda (tags) tags))))))))))))))))

  ((#"get.schedule.shift.tags")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule") #(text #"shift"))
      (match-lambda ((_ u (list oid sid shid))
          (organizations:with_organization u oid (lambda (o)
            (common:if_read o (lambda ()
              (schedules:with_schedule u sid (lambda (s)
                (common:if_read s (lambda ()
                  (schedules:with_schedule_shift u shid (lambda (shift)
                    (schedules:with_shift_tags shift (lambda (tags) tags))))))))))))))))

  ((#"create.schedule.profile")
    (tuple 'schedules '(#(text #"organization") #(text #"name")) 
      (match-lambda ((_ u (list oid name))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:create_profile u o name (lambda (p) p ))))))))))

  ((#"get.schedule.profiles")
    (tuple 'schedules '(#(text #"organization")) 
      (match-lambda ((_ u (list oid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_profiles u o (lambda (profiles) profiles ))))))))))

  ((#"rename.schedule.profile")
    (tuple 'schedules '(#(text #"organization") #(text #"profile") #(text #"name"))
      (match-lambda ((_ u (list oid pid name))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_profile u pid (lambda (p) 
              (common:if_owner p (lambda ()
                (schedules:rename_profile u o p name (lambda (p2) p2))))))))))))))
    
  ((#"get.schedule.profile")
    (tuple 'schedules '(#(text #"organization") #(text #"profile")) 
      (match-lambda ((_ u (list oid pid name))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_profile u pid (lambda (p) 
              (common:if_read p (lambda () p ))))))))))))
  
  ((#"set.schedule.profile.owner")
    (tuple 'schedules '(#(text #"organization") #(text #"profile") #(text #"owner"))
      (match-lambda ((_ u (list oid pid owner))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_profile u pid (lambda (p) 
              (common:if_owner p (lambda ()
                (users:find_by_id owner (lambda (m)
                  (common:with_org_access m o (lambda (o2)
                    (common:if_read o2 (lambda ()
                      (schedules:set_profile_owner u p m (lambda (p2) p2))))))))))))))))))))

  ((#"get.schedule.indicators" )
    (tuple 'schedules '(#(text #"organization"))
      (match-lambda ((_ u (list oid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_indicators (lambda (i) i))))))))))
        
  ((#"create.schedule.profile.rule")
    (tuple 'schedules '(#(text #"organization") #(text #"profile") #(text #"indicator") #(bool #"strong") #(text #"op") #(float #"value"))
      (match-lambda ((_ u (list oid pid iid strong op value))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_profile u pid (lambda (p) 
              (common:if_owner p (lambda () 
                (schedules:with_indicator u iid (lambda (i)
                  (schedules:create_profile_rule u p i strong op value (lambda (r) r))))))))))))))))
        
  ((#"get.schedule.profile.rules")
    (tuple 'schedules '(#(text #"organization") #(text #"profile"))
      (match-lambda ((_ u (list oid pid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_profile u pid (lambda (p) 
              (common:if_read p (lambda () 
                (schedules:with_profile_rules u p (lambda (rules) rules ))))))))))))))
    
  ((#"get.schedule.profile.rule")
    (tuple 'schedules '(#(text #"organization") #(text #"profile") #(text #"rule"))
      (match-lambda ((_ u (list oid pid rid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_profile u pid (lambda (p) 
              (common:if_read p (lambda () 
                (schedules:with_profile_rule u p rid (lambda (r) r ))))))))))))))
  
  ((#"remove.schedule.profile.rule")
    (tuple 'schedules '(#(text #"organization") #(text #"profile") #(text #"rule"))
      (match-lambda ((_ u (list oid pid rid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_profile u pid (lambda (p) 
              (common:if_owner p (lambda () 
                (schedules:with_profile_rule u p rid (lambda (r)
                  (schedules:remove_profile_rule u p r (lambda () p))))))))))))))))
 
  ((#"update.schedule.profile.rule")
    (tuple 'schedules '(#(text #"organization") #(text #"profile") #(text #"rule") #(bool #"strong") #(text #"op") #(float #"value"))
      (match-lambda ((_ u (list oid pid rid strong op value))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_profile u pid (lambda (p) 
              (common:if_owner p (lambda () 
                (schedules:with_profile_rule u p rid (lambda (r)
                  (schedules:update_profile_rule u p r strong op value (lambda (r) r))))))))))))))))
  
  ((#"disable.schedule.profile.rule")
    (tuple 'schedules '(#(text #"organization") #(text #"profile") #(text #"rule"))
      (match-lambda ((_ u (list oid pid rid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_profile u pid (lambda (p) 
              (common:if_owner p (lambda () 
                (schedules:with_profile_rule u p rid (lambda (r)
                  (schedules:disable_profile_rule u p r (lambda (r2) r2))))))))))))))))
  
  ((#"enable.schedule.profile.rule")
    (tuple 'schedules '(#(text #"organization") #(text #"profile") #(text #"rule"))
      (match-lambda ((_ u (list oid pid rid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_profile u pid (lambda (p) 
              (common:if_owner p (lambda () 
                (schedules:with_profile_rule u p rid (lambda (r)
                  (schedules:enable_profile_rule u p r (lambda (r2) r2))))))))))))))))
  
  ((#"get.schedules")
    (tuple 'schedules '(#(text #"organization"))
      (match-lambda ((_ u (list oid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedules u o (lambda (s) s ))))))))))
        
  ((#"get.all.schedules")
    (tuple 'schedules '()
      (match-lambda
        ((_ u _)
          (organizations:with_organizations u (lambda (orgs)
            (lists:flatten (lists:map (lambda (o)
              (schedules:with_schedules u o (lambda(schedules)
                (lists:map (lambda (s) 
                  (schedules:with_schedule_stats s (lambda (stats)
                    (maps:put #"stats" stats s)))) schedules)))) orgs))))))))

  ((#"get.schedules.by.month")
    (tuple 'schedules '(#(int #"year") #(int #"month"))
      (match-lambda
        ((_ u (list y m))
          (organizations:with_organizations u (lambda (orgs)
            (lists:flatten (lists:map (lambda (o)
              (schedules:with_schedules_by_month o y m (lambda(schedules)
                (lists:map (lambda (s)
                  (common:with_access u s (lambda (s2)
                    (schedules:with_schedule_stats s2 (lambda (stats)
                      (maps:put #"stats" stats s2)))))) schedules)))) orgs))))))))
  
  ((#"get.my.schedules.by.month")
    (tuple 'schedules '(#(int #"year") #(int #"month"))
      (match-lambda
        ((_ u (list y m))
          (organizations:with_organizations u (lambda (orgs)
            (lists:flatten (lists:map (lambda (o)
              (schedules:with_schedules_by_month o y m (lambda(schedules)
                (lists:filter (lambda (s) (common:is_owner s)) 
                  (lists:map (lambda (s)
                    (common:with_access u s (lambda (s2)
                      (schedules:with_schedule_stats s2 (lambda (stats)
                        (maps:put #"stats" stats s2)))))) schedules))))) orgs))))))))

  ((#"get.schedules.by.week")
    (tuple 'schedules '(#(int #"year") #(int #"week"))
      (match-lambda
        ((_ u (list y w))
          (organizations:with_organizations u (lambda (orgs)
            (lists:flatten (lists:map (lambda (o)
              (schedules:with_schedules_by_week o y w (lambda(schedules)
                (lists:map (lambda (s)
                  (common:with_access u s (lambda (s2)
                    (schedules:with_schedule_stats s2 (lambda (stats)
                      (maps:put #"stats" stats s2)))))) schedules)))) orgs))))))))

  ((#"get.my.schedules.by.week")
    (tuple 'schedules '(#(int #"year") #(int #"week"))
      (match-lambda
        ((_ u (list y w))
          (organizations:with_organizations u (lambda (orgs)
            (lists:flatten (lists:map (lambda (o)
              (schedules:with_schedules_by_week o y w (lambda(schedules)
                (lists:filter (lambda (s) (common:is_owner s)) 
                  (lists:map (lambda (s)
                    (common:with_access u s (lambda (s2)
                      (schedules:with_schedule_stats s2 (lambda (stats)
                        (maps:put #"stats" stats s2)))))) schedules))))) orgs))))))))



  ((#"get.schedule.by.week")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(int #"week") #(int #"year"))
      (match-lambda ((_ u (list oid tid week year))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_template u tid (lambda (t)
              (common:if_read t (lambda ()
                (schedules:with_schedule u o t week year (lambda (s) 
                  (schedules:with_schedule_stats s (lambda (stats)
                    (maps:put #"stats" stats s )))))))))))))))))

  ((#"get.schedule.by.id")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule"))
      (match-lambda ((_ u (list oid sid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s) 
              (common:if_read s (lambda () s
                (schedules:with_schedule_stats s (lambda (stats)
                  (maps:put #"stats" stats s)))))))))))))))
  
  ((#"create.schedule")
    (tuple 'schedules '(#(text #"organization") #(text #"template") #(int #"week") #(int #"year"))
      (match-lambda ((_ u (list oid tid week year))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_template u tid (lambda (t)
              (common:if_owner t (lambda ()
                (schedules:create_schedule u o t week year (lambda (s) s ))))))))))))))

  ((#"get.schedule.shifts")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule"))
      (match-lambda ((_ u (list oid sid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s)
              (common:if_read s (lambda ()
                (schedules:with_schedule_shifts u s (lambda (shifts) shifts ))))))))))))))
      
  ((#"get.schedule.stats")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule"))
      (match-lambda ((_ u (list oid sid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s)
              (common:if_read s (lambda ()
                (schedules:with_schedule_stats u s (lambda (stats) stats ))))))))))))))
  
  ((#"run.schedule")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule"))
      (match-lambda ((_ u (list oid sid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s)
              (common:if_owner s (lambda ()
                (schedules:set_schedule_status s #"pending" (lambda (s2)
                  (engine:create_job sid (lambda () 
                    (schedules:with_schedule u sid (lambda (s3) s3))))))))))))))))))
    
  ((#"publish.schedule")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule"))
      (match-lambda ((_ u (list oid sid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s)
              (common:if_owner s (lambda ()
                (common:if_status s (list #"draft" #"computed") (lambda ()
                  (schedules:publish u s (lambda (s2) 
                    (common:with_access u s2 (lambda(s3)
                      (schedules:with_schedule_stats s3 (lambda (stats)
                        (maps:put #"stats" stats s3)))))))))))))))))))))

  ((#"get.weekly.shifts")
    (tuple 'schedules '(#(text #"id") #(text #"week") #(text #"year"))
      (match-lambda ((_ u (list uid w y))
        (users:with_user u uid (lambda (p)
          (common:if_read p (lambda ()
            (schedules:with_published_weekly_shifts p y w (lambda (shifts) shifts))))))))))
    
  ((#"get.daily.shifts")
    (tuple 'schedules '(#(text #"id") #(text #"day") #(text #"month") #(text #"year"))
      (match-lambda ((_ u (list uid d m y))
        (users:with_user u uid (lambda (p)
          (common:if_read p (lambda ()
            (schedules:with_published_daily_shifts p y m d (lambda (shifts) shifts))))))))))

  ((#"get.monthly.shifts")
    (tuple 'schedules '(#(text #"id") #(text #"month") #(text #"year"))
      (match-lambda ((_ u (list uid m y))
        (users:with_user u uid (lambda (p)
          (common:if_read p (lambda ()
            (schedules:with_published_monthly_shifts p y m (lambda (shifts) shifts))))))))))
 
  ((#"create.availability")
    (tuple 'schedules '(#(text #"organization") #(int #"week") #(int #"year"))
      (match-lambda ((_ u (list oid w y))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:create_availability u o y w (lambda (av) av))))))))))
  
  ((#"get.user.availabilities")
    (tuple 'schedules '(#(text #"id") #(text #"week") #(text #"year"))
      (match-lambda ((_ u (list uid w y))
        (users:with_user u uid (lambda (p)
          (common:if_read p (lambda ()
            (schedules:with_availabilities p y w (lambda (av)
              (common:with_access u av (lambda (av2)
                (common:filter_with_access av2 (lambda (av3) av3))))))))))))))
    
  ((#"set.availability.template")
    (tuple 'schedules '(#(text #"id") #(text #"template"))
      (match-lambda ((_ u (list aid tid))
        (schedules:with_availability_template u tid (lambda (t)
          (common:if_read t (lambda ()
            (schedules:with_availability u aid (lambda (a)
              (schedules:set_availability_template u a t (lambda (a2) a2))))))))))))
 
  ((#"enable.availability")
    (tuple 'schedules '(#(text #"id"))
      (match-lambda ((_ u (list aid))
        (schedules:with_availability u aid (lambda (a)
          (schedules:enable_availability u a (lambda (a2) a2))))))))

  ((#"disable.availability")
    (tuple 'schedules '(#(text #"id"))
      (match-lambda ((_ u (list aid))
        (schedules:with_availability u aid (lambda (a)
          (schedules:disable_availability u a (lambda (a2) a2))))))))
  
  ((#"edit.availability")
    (tuple 'schedules '(#(text #"id"))
      (match-lambda ((_ u (list aid))
        (schedules:with_availability u aid (lambda (a)
          (schedules:edit_availability u a (lambda (a2) a2))))))))
  
  ((#"get.availability")
    (tuple 'schedules '(#(text #"id"))
      (match-lambda ((_ u (list aid))
        (schedules:with_availability u aid (lambda (a) a))))))
  
  ((#"discard.availability.changes")
    (tuple 'schedules '(#(text #"id"))
      (match-lambda ((_ u (list aid))
        (schedules:with_availability u aid (lambda (a)
          (schedules:discard_availability_changes u a (lambda (a2) a2))))))))

  ((#"get.availability.shifts")
    (tuple 'schedules '(#(text #"id"))
      (match-lambda ((_ u (list id))
        (schedules:with_availability u id (lambda (a)
          (schedules:with_availability_shifts u a (lambda (shifts) shifts))))))))

  ((#"create.availability.shift")
    (tuple 'schedules '(#(text #"id")
      #(int #"year") #(int #"month") #(int #"day") #(int #"start_day") #(int #"start_hour") #(int #"start_min" ) #(int #"end_day") #(int #"end_hour") #(int #"end_min" ))
      (match-lambda ((_ u (list aid y m d sd sh sm ed eh em))
        (schedules:with_availability u aid (lambda (a)
          (schedules:create_availability_shift a y m d sd sh sm ed eh em (lambda (shift) shift))))))))
  
  ((#"update.availability.shift")
    (tuple 'schedules '(#(text #"id") #(text #"shift")
      #(int #"year") #(int #"month") #(int #"day") #(int #"start_day") #(int #"start_hour") #(int #"start_min" ) #(int #"end_day") #(int #"end_hour") #(int #"end_min" ))
      (match-lambda ((_ u (list aid sid y m d sd sh sm ed eh em))
        (schedules:with_availability u aid (lambda (a)
          (schedules:with_availability_shift a sid (lambda (shift)
            (schedules:update_availability_shift a shift y m d sd sh sm ed eh em (lambda (s2) s2))))))))))

  ((#"copy.availability.shift")
    (tuple 'schedules '(#(text #"id") #(text #"shift")
      #(int #"year") #(int #"month") #(int #"day") #(int #"start_day") #(int #"start_hour") #(int #"start_min" ) #(int #"end_day") #(int #"end_hour") #(int #"end_min" ))
      (match-lambda ((_ u (list aid sid y m d sd sh sm ed eh em))
        (schedules:with_availability u aid (lambda (a)
          (schedules:with_availability_shift a sid (lambda (shift)
            (schedules:copy_availability_shift a shift y m d sd sh sm ed eh em (lambda (s2) s2))))))))))


  ((#"remove.availability.shift")
    (tuple 'schedules '(#(text #"id") #(text #"shift"))
      (match-lambda ((_ u (list aid sid))
        (schedules:with_availability u aid (lambda (a)
          (schedules:with_availability_shift a sid (lambda (shift)
            (schedules:remove_availability_shift a shift (lambda ()(map 'removed 'true)))))))))))
  
  ((#"save.availability")
    (tuple 'schedules '(#(text #"id") #(text #"name"))
      (match-lambda ((_ u (list aid name))
        (schedules:with_availability u aid (lambda (a)
          (organizations:with_organization u (maps:get #"organization" a) (lambda (o)
            (common:if_read o (lambda ()
              (schedules:availability_to_template u o a name (lambda (a2) a2))))))))))))

  ((#"get.schedule.events")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule"))
      (match-lambda ((_ u (list oid sid))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s)
              (common:if_read s (lambda ()
                (common:with_events s (lambda (events) events))))))))))))))

  ((#"get.schedule.constraints")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule") #(bool #"verified"))
      (match-lambda ((_ u (list oid sid v))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s)
              (common:if_read s (lambda ()
                (schedules:with_constraints s v (lambda (c) c))))))))))))))
  
  ((#"get.schedule.participants")
    (tuple 'schedules '(#(text #"schedule"))
      (match-lambda ((_ u (list sid))
        (schedules:with_schedule u sid (lambda (s)
          (common:if_read s (lambda ()
            (schedules:with_participant_stats s (lambda (stats) stats))))))))))

  ((#"set.schedule.auto.mode")
    (tuple 'schedules '(#(text #"organization") #(text #"schedule") #(bool #"auto"))
      (match-lambda ((_ u (list oid sid auto))
        (organizations:with_organization u oid (lambda (o)
          (common:if_read o (lambda ()
            (schedules:with_schedule u sid (lambda (s)
              (common:if_owner s (lambda ()
                (schedules:set_schedule_auto_mode u s auto (lambda (s2)
                  (common:with_access u s2 (lambda (s3)
                    (schedules:with_schedule_stats s3 (lambda (stats)
                      (maps:put #"stats" stats s3)))))))))))))))))))

  ((#"get.unread.notifications")
    (tuple 'signed_in '()
      (match-lambda ((_ u _)
        (notifications:get_unread u (lambda (notes) notes))))))

  ((#"get.read.notifications")
    (tuple 'signed_in '()
      (match-lambda ((_ u _)
        (notifications:get_read u (lambda (notes) notes))))))
  
  ((#"read.all.notifications")
    (tuple 'signed_in '()
      (match-lambda ((_ u _)
        (notifications:read_all u (lambda() ))))))

  ((#"read.notification")
    (tuple 'signed_in '(#(text #"id"))
      (match-lambda ((_ u (list id))
        (notifications:read_one u id (lambda () ))))))

  ((#"unread.notification")
    (tuple 'signed_in '(#(text #"id"))
      (match-lambda ((_ u (list id))
        (notifications:unread_one u id (lambda () ))))))
  
  ((#"purge.read.notifications")
    (tuple 'signed_in '()
      (match-lambda ((_ u _)
        (notifications:purge_read u (lambda() ))))))
 
  ((#"get.weekly.stats")
    (tuple 'signed_in '(#(int #"year") #(int #"week") #(text #"type"))
      (match-lambda ((_ u (list y w t))
        (stats:with_weekly_stats u t y w (lambda (s) s))))))

  ((#"get.all.weekly.stats")
    (tuple 'signed_in '(#(text #"profile") #(text #"type"))
      (match-lambda ((_ u (list id t))
        (users:find_by_id id (lambda (p)
          (users:on_read_access u p (lambda ()
            (stats:with_weekly_stats p t (lambda (s) s))))))))))
 
  ((#"get.issues.users")
    (tuple 'issues '()
      (match-lambda ((_ u _)
        (users:find_by_acl #"issues" (lambda (users) users))))))

  ((#"get.open.issues")
    (tuple 'issues '()
      (match-lambda ((_ u _)
        (issues:get u #"open")))))

  ((#"get.closed.issues")
    (tuple 'issues '()
      (match-lambda ((_ u _)
        (issues:get u #"closed" )))))

  ((#"create.issue")
    (tuple 'issues '(#(text #"summary"))
      (match-lambda ((_ u (list summary))
        (issues:create u summary)))))

  ((#"rename.issue")
    (tuple 'issues '(#(text #"id") #(text #"summary"))
      (match-lambda ((_ u (list id summary))
        (issues:with_issue u id (lambda (i)
          (common:if_owner i (lambda ()
            (issues:rename u i summary)))))))))

  ((#"update.issue.status")
    (tuple 'issues '(#(text #"id") #(text #"status"))
      (match-lambda ((_ u (list id status))
        (issues:with_issue u id (lambda (i)
          (common:if_owner i (lambda ()
            (issues:update_status u i status)))))))))
  
  ((#"update.issue.estimate")
    (tuple 'issues '(#(text #"id") #(text #"estimate"))
      (match-lambda ((_ u (list id estimate))
        (issues:with_issue u id (lambda (i)
          (common:if_owner i (lambda ()
            (issues:update_estimate u i estimate)))))))))
  
  ((#"update.issue.release")
    (tuple 'issues '(#(text #"id") #(text #"release"))
      (match-lambda ((_ u (list id release))
        (issues:with_issue u id (lambda (i)
          (issues:update_release u i release)))))))
  
  ((#"get.issue.events")
    (tuple 'issues '(#(text #"id"))
      (match-lambda ((_ u (list id))
        (issues:with_issue u id (lambda (i)
          (issues:get_events u i)))))))
  
  ((#"get.issue.comments")
    (tuple 'issues '(#(text #"id"))
      (match-lambda ((_ u (list id))
        (issues:with_issue u id (lambda (i)
          (issues:get_comments u i)))))))

  ((#"create.issue.comment")
    (tuple 'issues '(#(text #"id") #(text #"comment"))
      (match-lambda ((_ u (list id comment))
        (issues:with_issue u id (lambda (i)
          (issues:create_comment u i comment)))))))

  ((#"link.issue.asset")
    (tuple 'issues '(#(text #"id") #(text #"asset"))
      (match-lambda ((_ u (list id aid))
        (issues:with_issue u id (lambda (i)
          (assets:with_asset aid (lambda (m)
            (issues:add_asset u i m (lambda ()))))))))))
  
  ((#"get.issue.assets")
    (tuple 'issues '(#(text #"id"))
      (match-lambda ((_ u (list id))
        (issues:with_issue u id (lambda (i)
          (assets:with_assets i (lambda (assets) assets))))))))
  
  ((#"toggle.issue.emails")
    (tuple 'issues '()
      (lambda (_ u _)
        (issues:toggle_emails u (lambda (u2) u2)))))

  (((= _ a)) (kit:err 'not_implemented a)))
